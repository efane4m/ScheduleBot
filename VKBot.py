import requests
import openpyxl
import os.path
import pickle
from bs4 import BeautifulSoup

import datetime
from datetime import date
from datetime import timedelta
from datetime import datetime

import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id

import pyowm
from pyowm.utils.config import get_default_config
from pyowm.utils import formatting
from pyowm.weatherapi25.weather import Weather

def get_schedule(new_data = False):
    if os.path.exists('schedule.pickle') and not new_data:
        with open('schedule.pickle', 'rb') as f:
            groups, teachers = pickle.load(f)
            return groups, teachers
    page = requests.get("https://www.mirea.ru/schedule/")
    soup = BeautifulSoup(page.text, "html.parser")
    result = soup.find("div", {"class": "schedule"}).\
             find(string = "–ò–Ω—Å—Ç–∏—Ç—É—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π").\
             find_parent("div").\
             find_parent("div").\
             findAll("a", {"class": "uk-link-toggle"})
    groups = {}
    teachers = {}
    for x in result:
        link = str(x)[str(x).find('https://'):str(x).find('" target=')]
        book_name = link[link.rfind('/') + 1:]
        if book_name[0:3] != "IIT":
            continue
        file = open(book_name, "wb")
        file.write(requests.get(link).content)
        file.close()
        book = openpyxl.load_workbook(book_name)
        sheet = book.active
        for y in range(1, sheet.max_column + 1):
            group = sheet.cell(row = 2, column = y).value
            if group and str(group).count('-') == 2:
                week_1 = []
                week_2 = []
                week = [week_1, week_2]
                for z in range (2):
                    for i in range(7):
                        day = []
                        for j in range(7):
                            if sheet.cell(row = 4 + z + i * 14 + j * 2, column = y).value:
                                obj = [sheet.cell(row = 4 + z + i * 14 + j * 2, column = y).value,
                                       sheet.cell(row = 4 + z + i * 14 + j * 2, column = y + 1).value,
                                       sheet.cell(row = 4 + z + i * 14 + j * 2, column = y + 2).value,
                                       sheet.cell(row = 4 + z + i * 14 + j * 2, column = y + 3).value]
                                for k in range(4):
                                    if obj[k].count("\n") != 0:
                                        obj[k] = obj[k][:obj[k].find("\n")]
                                if obj[2].count(",") != 0:
                                    obj[2] = obj[2][:obj[2].find(",")]
                                if not obj[2] in teachers and obj[2] != "":
                                    teacher = [[[str(j+1) + ") -" for j in range(7)] for i in range(7)] for z in range(2)]
                                    teachers[obj[2]] = teacher
                                if obj[2] != "":
                                    obj_ = obj.copy()
                                    obj_[2] = group
                                    teachers[obj[2]][z][i][j] = str(j+1) + ") " + ", ".join(map(str, obj_))
                            else:
                                obj = ['-']
                            day.append(str(j+1) + ") " + ", ".join(map(str, obj)))
                        week[z].append(day)
                groups[group] = week
    with open('schedule.pickle', 'wb') as f:
        pickle.dump([groups, teachers], f)
    print("Ready")
    return groups, teachers

def get_schedule_by_day(groups, group, dt):
    first_day = date(year = 2024, month = 9, day = 2)
    days = (dt - first_day).days % 14
    if days < 7:
        return groups[group][0][days]
    else:
        return groups[group][1][days - 7]

def get_schedule_by_week_day(groups, group, day):
    week_days = {"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 1,
                 "–≤—Ç–æ—Ä–Ω–∏–∫": 2,
                 "—Å—Ä–µ–¥–∞": 3,
                 "—á–µ—Ç–≤–µ—Ä–≥": 4,
                 "–ø—è—Ç–Ω–∏—Ü–∞": 5,
                 "—Å—É–±–±–æ—Ç–∞": 6,
                 "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 7}
    return [groups[group][0][week_days[day] - 1],
            groups[group][1][week_days[day] - 1]]

def get_schedule_by_week(groups, group, dt):
    first_day = date(year = 2024, month = 9, day = 2)
    days = (dt - first_day).days % 14
    if days < 7:
        return groups[group][0]
    else:
        return groups[group][1]

def get_weather(weather_manager, day: datetime):
    weather_1 = weather_manager.one_call_history(55.753, 37.621, dt = formatting.to_UNIXtime(day) - 100).forecast_hourly if day <= datetime.now() + timedelta(minutes = 1) else []
    weather_2 = weather_manager.one_call(55.753, 37.621).forecast_hourly
    weather_all = list(set(weather_1 + weather_2))
    weather_all.sort(key = lambda x: x.ref_time)
    return [weather for weather in weather_all if datetime.utcfromtimestamp(weather.ref_time).day == day.day]

def weather_to_text(weather: Weather):
    weather_icons = {"—è—Å–Ω–æ": '‚òÄÔ∏è',
                 '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': 'üå§',
                 '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏': 'üå§',
                 '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': '‚òÅ',
                 '–ø–∞—Å–º—É—Ä–Ω–æ': '‚òÅ',
                 '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': 'üå¶',
                 '–¥–æ–∂–¥—å': 'üåß',
                 '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å': 'üåß'}
    text = f"{weather_icons[weather.detailed_status]}\n{weather.detailed_status}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {weather.temperature('celsius')['temp']}¬∞–°\n" \
           f"–î–∞–≤–ª–µ–Ω–∏–µ: {int(weather.pressure['press'] / 1.33322)} –º–º —Ä—Ç—É—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–±–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {weather.humidity}%\n" \
           f"–í–µ—Ç–µ—Ä {weather.wind()['speed']} –º\\—Å\n"
    return text

def main():
    vk_session = vk_api.VkApi(token = 'YOU_VK_TOKEN')
    vk = vk_session.get_api()
    presets = get_default_config()
    presets['language'] = 'ru'
    owm = pyowm.OWM('YOU_API_TOKEN', presets)
    weather_manager = owm.weather_manager()
    keyboard_main = VkKeyboard(one_time = False)
    keyboard_main.add_button('–Ω–∞ —Å–µ–≥–æ–¥–Ω—è', color=VkKeyboardColor.POSITIVE)
    keyboard_main.add_button('–Ω–∞ –∑–∞–≤—Ç—Ä–∞', color=VkKeyboardColor.NEGATIVE)
    keyboard_main.add_line()
    keyboard_main.add_button('–Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é', color=VkKeyboardColor.SECONDARY)
    keyboard_main.add_button('–Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é', color=VkKeyboardColor.SECONDARY)
    keyboard_main.add_line()
    keyboard_main.add_button('–∫–∞–∫–∞—è –Ω–µ–¥–µ–ª—è?')
    keyboard_main.add_button('–∫–∞–∫–∞—è –≥—Ä—É–ø–ø–∞?')
    keyboard_short = VkKeyboard(one_time = False)
    keyboard_short.add_button('–Ω–∞ —Å–µ–≥–æ–¥–Ω—è', color=VkKeyboardColor.POSITIVE)
    keyboard_short.add_button('–Ω–∞ –∑–∞–≤—Ç—Ä–∞', color=VkKeyboardColor.NEGATIVE)
    keyboard_short.add_line()
    keyboard_short.add_button('–Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é', color=VkKeyboardColor.SECONDARY)
    keyboard_short.add_button('–Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é', color=VkKeyboardColor.SECONDARY)
    keyboard_weather = VkKeyboard(one_time = False)
    keyboard_weather.add_button('—Å–µ–π—á–∞—Å', color=VkKeyboardColor.SECONDARY)
    keyboard_weather.add_button('—Å–µ–≥–æ–¥–Ω—è', color=VkKeyboardColor.POSITIVE)
    keyboard_weather.add_button('–∑–∞–≤—Ç—Ä–∞', color=VkKeyboardColor.POSITIVE)
    keyboard_weather.add_line()
    keyboard_weather.add_button('–Ω–∞ 5 –¥–Ω–µ–π', color=VkKeyboardColor.POSITIVE)
    week_days = {"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 1,
                 "–≤—Ç–æ—Ä–Ω–∏–∫": 2,
                 "—Å—Ä–µ–¥–∞": 3,
                 "—á–µ—Ç–≤–µ—Ä–≥": 4,
                 "–ø—è—Ç–Ω–∏—Ü–∞": 5,
                 "—Å—É–±–±–æ—Ç–∞": 6,
                 "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 7}
    weather_icons = {"—è—Å–Ω–æ": '‚òÄÔ∏è',
                 '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': 'üå§',
                 '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏': 'üå§',
                 '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': '‚òÅ',
                 '–ø–∞—Å–º—É—Ä–Ω–æ': '‚òÅ',
                 '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': 'üå¶',
                 '–¥–æ–∂–¥—å': 'üåß',
                 '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å': 'üåß'}
    groups, teachers = get_schedule()
    users_current = {}
    users_groups = {}
    names = []
    longpoll = VkLongPoll(vk_session)
    weather = [get_weather(weather_manager, datetime.today())] + [get_weather(weather_manager, datetime.today() + timedelta(days = 1))]
    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW and event.text and event.to_me:
            txt = event.text.lower()
            words = txt.split()
            keyboard = keyboard_main.get_keyboard()
            if event.user_id not in users_groups:
                users_groups[event.user_id] = "–ò–ö–ë–û-25-22"
                users_current[event.user_id] = "–ò–ö–ë–û-25-22"
            if txt == '–Ω–∞—á–∞—Ç—å' or txt == 'start':
                message = '''–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
1) [–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã] - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
2) "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è" - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
3) "–Ω–∞ –∑–∞–≤—Ç—Ä–∞" - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
4) "–∫–∞–∫–∞—è –Ω–µ–¥–µ–ª—è?" - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
5) "–Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é" - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
6) "–Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é" - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
7) "–∫–∞–∫–∞—è –≥—Ä—É–ø–ø–∞?" - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
8) "–ù–∞–π—Ç–∏ [—Ñ–∞–º–∏–ª–∏—è]" - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—è
9) "–ø–æ–≥–æ–¥–∞" - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –ú–æ—Å–∫–≤–µ'''
                keyboard = 0
            elif txt.upper() in groups:
                users_groups[event.user_id] = txt.upper()
                message = "–Ø –∑–∞–ø–æ–º–Ω–∏–ª, —á—Ç–æ —Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã " + txt.upper()
                keyboard = 0
            elif len(words) == 2 and words[1] in week_days and users_current[event.user_id] in groups:
                schedule = get_schedule_by_week_day(groups, users_current[event.user_id], words[1])
                message = "\n".join(["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ " + words[1] + " –≥—Ä—É–ø–ø—ã " + users_current[event.user_id],
                                     "–ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è:", *schedule[0],
                                     "–ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è:", *schedule[1]])
                users_current[event.user_id] = users_groups[event.user_id]
            elif len(words) == 2 and words[1].upper() in groups:
                message = "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã " + words[1] + "..."
                users_current[event.user_id] = words[1].upper()
            elif len(words) == 3 and words[1] in week_days and words[2].upper() in groups:
                users_current[event.user_id] = words[2].upper()
                schedule = get_schedule_by_week_day(groups, users_current[event.user_id], words[1])
                message = "\n".join(["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ " + words[1] + " –≥—Ä—É–ø–ø—ã " + users_current[event.user_id],
                                     "–ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è:", *schedule[0],
                                     "–ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è:", *schedule[1]])
                users_current[event.user_id] = users_groups[event.user_id]
            elif txt == "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è" and users_current[event.user_id] in groups:
                schedule = get_schedule_by_day(groups, users_current[event.user_id], date.today())
                message = "\n".join(["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≥—Ä—É–ø–ø—ã " + users_current[event.user_id], *schedule])
                users_current[event.user_id] = users_groups[event.user_id]
            elif txt == "–Ω–∞ –∑–∞–≤—Ç—Ä–∞" and users_current[event.user_id] in groups:
                schedule = get_schedule_by_day(groups, users_current[event.user_id], date.today() + timedelta(days = 1))
                message = "\n".join(["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≥—Ä—É–ø–ø—ã " + users_current[event.user_id], *schedule])
                users_current[event.user_id] = users_groups[event.user_id]
            elif txt == "–Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é" and users_current[event.user_id] in groups:
                schedule = get_schedule_by_week(groups, users_current[event.user_id], date.today())
                message = ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –≥—Ä—É–ø–ø—ã " + users_current[event.user_id]]
                for key in week_days:
                    message.append(key)
                    message += schedule[week_days[key] - 1]
                message = "\n".join(message)
                users_current[event.user_id] = users_groups[event.user_id]
            elif txt == "–Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é" and users_current[event.user_id] in groups:
                schedule = get_schedule_by_week(groups, users_current[event.user_id], date.today() + timedelta(days=7))
                message = ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –≥—Ä—É–ø–ø—ã " + users_current[event.user_id]]
                for key in week_days:
                    message.append(key)
                    message += schedule[week_days[key] - 1]
                message = "\n".join(message)
                users_current[event.user_id] = users_groups[event.user_id]
            elif txt == '–∫–∞–∫–∞—è –Ω–µ–¥–µ–ª—è?':
                message = "–ò–¥–µ—Ç " + str((date.today() - date(year = 2024, month = 9, day = 2)).days // 7 + 1) + " –Ω–µ–¥–µ–ª—è"
            elif txt == '–∫–∞–∫–∞—è –≥—Ä—É–ø–ø–∞?':
                message = "–ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã " + users_current[event.user_id]
            elif words[0] == "–Ω–∞–π—Ç–∏":
                names = []
                for teacher in teachers:
                    if words[1] in str(teacher).lower():
                        names += [str(teacher)]
                if len(names) > 1:
                    keyboard_teachers = VkKeyboard(one_time = True)
                    for x in range(5):
                        if x >= len(names):
                            break
                        if x > 0:
                            keyboard_teachers.add_line()
                        keyboard_teachers.add_button(str(names[x]), color=VkKeyboardColor.SECONDARY)
                    message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
                    keyboard = keyboard_teachers.get_keyboard()
                else:
                    users_current[event.user_id] = names[0]
                    message = "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è " + names[0]
                    keyboard = keyboard_short.get_keyboard()
            elif event.text in names:
                users_current[event.user_id] = event.text
                message = "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è " + event.text
                keyboard = keyboard_short.get_keyboard()
            elif txt == "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è" and users_current[event.user_id] in teachers:
                schedule = get_schedule_by_day(teachers, users_current[event.user_id], date.today())
                message = "\n".join(["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≥—Ä—É–ø–ø—ã " + users_current[event.user_id], *schedule])
                users_current[event.user_id] = users_groups[event.user_id]
            elif txt == "–Ω–∞ –∑–∞–≤—Ç—Ä–∞" and users_current[event.user_id] in teachers:
                schedule = get_schedule_by_day(teachers, users_current[event.user_id], date.today() + timedelta(days = 1))
                message = "\n".join(["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≥—Ä—É–ø–ø—ã " + users_current[event.user_id], *schedule])
                users_current[event.user_id] = users_groups[event.user_id]
            elif txt == "–Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é" and users_current[event.user_id] in teachers:
                schedule = get_schedule_by_week(teachers, users_current[event.user_id], date.today())
                message = ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –≥—Ä—É–ø–ø—ã " + users_current[event.user_id]]
                for key in week_days:
                    message.append(key)
                    message += schedule[week_days[key] - 1]
                message = "\n".join(message)
                users_current[event.user_id] = users_groups[event.user_id]
            elif txt == "–Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é" and users_current[event.user_id] in teachers:
                schedule = get_schedule_by_week(teachers, users_current[event.user_id], date.today() + timedelta(days=7))
                message = ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –≥—Ä—É–ø–ø—ã " + users_current[event.user_id]]
                for key in week_days:
                    message.append(key)
                    message += schedule[week_days[key] - 1]
                message = "\n".join(message)
                users_current[event.user_id] = users_groups[event.user_id]
            elif txt == "–ø–æ–≥–æ–¥–∞":
                message = "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ"
                keyboard = keyboard_weather.get_keyboard()
            elif txt == "—Å–µ–π—á–∞—Å":
                weather_now = weather_manager.weather_at_place("Moscow").weather
                message = f"{weather_icons[weather_now.detailed_status]}\n{weather_now.detailed_status}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {weather_now.temperature('celsius')['temp']}¬∞–°\n" \
                       f"–î–∞–≤–ª–µ–Ω–∏–µ: {int(weather_now.pressure['press'] / 1.33322)} –º–º —Ä—Ç—É—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–±–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_now.humidity}%\n" \
                       f"–í–µ—Ç–µ—Ä {weather_now.wind()['speed']} –º\\—Å\n"
                keyboard = keyboard_weather.get_keyboard()
            elif txt == "—Å–µ–≥–æ–¥–Ω—è":
                message = f'''–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ —Å–µ–≥–æ–¥–Ω—è
                /{weather[0][9].temperature('celsius')['temp']}¬∞–° // {weather[0][14].temperature('celsius')['temp']}¬∞–° // {weather[0][17].temperature('celsius')['temp']}¬∞–° // {weather[0][23].temperature('celsius')['temp']}¬∞–° /
                –£–¢–†–û  {weather_to_text(weather[0][9])}
                –î–ï–ù–¨  {weather_to_text(weather[0][14])}
                –í–ï–ß–ï–† {weather_to_text(weather[0][17])}
                –ù–û–ß–¨  {weather_to_text(weather[0][23])}'''
                keyboard = keyboard_weather.get_keyboard()
            elif txt == "–∑–∞–≤—Ç—Ä–∞":
                message = f'''–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ –∑–∞–≤—Ç—Ä–∞
                /{weather[1][9].temperature('celsius')['temp']}¬∞–° // {weather[1][14].temperature('celsius')['temp']}¬∞–° // {weather[1][17].temperature('celsius')['temp']}¬∞–° // {weather[1][23].temperature('celsius')['temp']}¬∞–° /
                –£–¢–†–û  {weather_to_text(weather[1][9])}
                –î–ï–ù–¨  {weather_to_text(weather[1][14])}
                –í–ï–ß–ï–† {weather_to_text(weather[1][17])}
                –ù–û–ß–¨  {weather_to_text(weather[1][23])}'''
                keyboard = keyboard_weather.get_keyboard()
            elif txt == "–Ω–∞ 5 –¥–Ω–µ–π":
                days = weather_manager.one_call(55.752546, 37.621193).forecast_daily[:5]
                message = f'''–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ —Å {str(datetime.today())[:10]} –ø–æ {str(datetime.today() + timedelta(days=+4))[:10]}
                {weather_icons[days[0].detailed_status]} {weather_icons[days[1].detailed_status]} {weather_icons[days[2].detailed_status]} {weather_icons[days[3].detailed_status]} {weather_icons[days[4].detailed_status]}
                / {round((days[0].temp['day']) - 273.15, 2)}¬∞–° // {round((days[1].temp['day']) - 273.15, 2)}¬∞–° // {round((days[2].temp['day']) - 273.15, 2)}¬∞–° // {round((days[3].temp['day']) - 273.15, 2)}¬∞–° // {round((days[4].temp['day']) - 273.15, 2)}¬∞–° / –î–ï–ù–¨
                / {round((days[0].temp['night']) - 273.15, 2)}¬∞–° // {round((days[1].temp['night']) - 273.15, 2)}¬∞–° // {round((days[2].temp['night']) - 273.15, 2)}¬∞–° // {round((days[3].temp['night']) - 273.15, 2)}¬∞–° // {round((days[4].temp['night']) - 273.15, 2)}¬∞–° / –ù–û–ß–¨'''
                keyboard = keyboard_weather.get_keyboard()
            else:
                message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
            vk.messages.send(
                user_id = event.user_id,
                random_id = get_random_id(),
                message = message,
                keyboard = keyboard)
if __name__ == '__main__':
    main()
